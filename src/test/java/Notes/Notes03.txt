What I have learned today
1.Hooks - Must be created in StepDefinitions
  benefits  - manage code work flow
            - help reduce code redundancy
  we will create Hooks class and extends CommonMethods bc
         openBrowserAndLaunchApplication();
         closeBrowser();
         we create in CommonMethods

  @Before
      public void preCondition() {
          openBrowserAndLaunchApplication();
      }

      @After
      public void postCondition(){
          closeBrowser();
      }

Remember : after we create Hooks we don't need
        - Given open the browser and launch HRMS application
        - And Close the browser

    we can delete it in feature file and also can delete the code in StepDefinitions
    bc Hooks will take care of those steps
    for @After : help when test case is failed and always close the browser for us


2. Background keyword
    we use in Feature file
    Background - it is applicable only for one feature file
                 it means for every feature file background will be different
                 steps which are common among all the scenarios of that feature file
                 will be taken into background but make sure the flow is not broken.
                 if the flow breaks, then we cannot take steps in background after that



 Hooks VS background

 Hooks are applicable for whole project (for all the feature files)
 Background is applicable for one feature file and varies from file to file
 First Hooks execute then background execute then scenario execute




3. We write common method for select drop down
    we can handle drop down by using Select class and Options class
    and then create method for it (if don't remember go back to Selenium)

4. We learn how to create Scenario by using regular expression

The ways we can use data in our codes.
1.Hard code (java)
2.property file (java)
3.regular expression in " " double code like "admin" and "password" (cucumber)

    Ex : When user enters valid "admin" and valid "Hum@nhrm123"

    @When("user enters valid {string} and valid {string}")
        public void user_enters_valid_and_valid(String name, String pass) {
            WebElement usernameTextBox=driver.findElement(By.id("txtUsername"));
            sendText(usernameTextBox,name);
            WebElement passwordTextBox=driver.findElement(By.id("txtPassword"));
            sendText(passwordTextBox,pass);


4.scenario outline

    1. Parameterization allows you to pass values into your tests at runtime,
     rather than hardcoding them into the code itself.
    This makes your tests more flexible and less brittle,
     as you can modify the values without having to modify the code.

    2. Data Driven is when we use any excel sheet to fetch data
    or from any other external source into our code.